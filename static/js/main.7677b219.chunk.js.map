{"version":3,"sources":["Timer.jsx","App.js","serviceWorker.js","index.js"],"names":["Timer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showSplits","event","splits","target","value","split","setState","runningTime","Number","multiplier","walkingTime","series","start","preventDefault","console","log","message","concat","warmingUpTime","setTimeout","nextSeries","interval","setInterval","updateTimer","_this$state","state","currentSeries","prevState","coolingDownTime","clearInterval","currentSeconds","seconds","minutes","toString","timer","_this$state2","react_default","a","createElement","className","onSubmit","name","onChange","type","id","src","Component","App","src_Timer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7677b219.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.multiplier = 1000; //Change to 10 to debug\n    this.warmingUpTime = 300 * this.multiplier;\n    this.coolingDownTime = 300 * this.multiplier;\n\n    this.interval = null;\n\n    this.state = {\n      runningTime: 60 * this.multiplier,\n      walkingTime: 180 * this.multiplier,\n      series: 5,\n      currentSeries: 1,\n      seconds: 0,\n      timer: \"\",\n      message: \"\"\n    };\n  }\n\n  showSplits = event => {\n    const splits = event.target.value.split(\",\");\n    this.setState({\n      runningTime: Number(splits[0]) * this.multiplier,\n      walkingTime: Number(splits[1]) * this.multiplier,\n      series: Number(splits[2])\n    });\n  };\n\n  start = event => {\n    event.preventDefault();\n\n    console.log(\"start\");\n\n    this.setState({\n      message: ` Warm up! Walk ${this.warmingUpTime /\n        this.multiplier /\n        60} minutes`\n    });\n\n    // walkNotification.play();\n\n    setTimeout(this.nextSeries, this.warmingUpTime);\n\n    this.interval = setInterval(this.updateTimer, this.multiplier);\n  };\n\n  nextSeries = () => {\n    const { series, runningTime, walkingTime, currentSeries } = this.state;\n\n    if (currentSeries <= series) {\n      this.setState({\n        message: `Series ${currentSeries}. Run ${runningTime /\n          this.multiplier /\n          60} minutes`\n      });\n      // runNotification.play();\n\n      setTimeout(() => {\n        this.setState({\n          message: `Series ${currentSeries}. Walk ${walkingTime /\n            this.multiplier /\n            60} minutes`\n        });\n        // walkNotification.play();\n\n        setTimeout(this.nextSeries, walkingTime);\n      }, runningTime);\n      this.setState(prevState => {\n        return {\n          currentSeries: prevState.currentSeries + 1\n        };\n      });\n    } else {\n      this.setState({\n        message: `Cool down! Walk ${this.coolingDownTime /\n          this.multiplier /\n          60} minutes`\n      });\n      setTimeout(() => {\n        this.setState({\n          message: \"Finish!\"\n        });\n        clearInterval(this.interval);\n        // endNotification.play();\n      }, this.coolingDownTime);\n    }\n  };\n\n  updateTimer = () => {\n    this.setState(prevState => {\n      const currentSeconds = prevState.seconds + 1;\n      const minutes = (currentSeconds / 60).toString().split(\".\")[0];\n      return {\n        seconds: currentSeconds,\n        timer: `${minutes}'${currentSeconds - minutes * 60}\"`\n      };\n    });\n  };\n\n  render() {\n    const { series, runningTime, walkingTime, message, timer } = this.state;\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.start}>\n          <select name=\"week\" onChange={this.showSplits}>\n            <option value=\"60,180,5\">Week 1</option>\n            <option value=\"90,180,5\">Week 2</option>\n            <option value=\"120,120,5\">Week 3</option>\n            <option value=\"180,120,5\">Week 4</option>\n            <option value=\"300,120,3\">Week 5</option>\n            <option value=\"480,120,3\">Week 6</option>\n            <option value=\"600,60,3\">Week 7</option>\n            <option value=\"900,60,2\">Week 8</option>\n          </select>\n          <input type=\"submit\" value=\"start\" />\n        </form>\n\n        <p id=\"splits\">{`${series} series of ${runningTime /\n          this.multiplier /\n          60}' running and ${walkingTime / this.multiplier / 60}' walking`}</p>\n        <hr />\n        <p>{message}</p>\n        <p>{timer}</p>\n\n        <audio id=\"walk!\">\n          <source src=\"audios/walk.mp3\" type=\"audio/mpeg\" />\n        </audio>\n        <audio id=\"run!\">\n          <source src=\"audios/run.mp3\" type=\"audio/mpeg\" />\n        </audio>\n        <audio id=\"finish!\">\n          <source src=\"audios/end.wav\" type=\"audio/mpeg\" />\n        </audio>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React from \"react\";\nimport \"./App.css\";\nimport Timer from \"./Timer\";\n\nfunction App() {\n  return <Timer />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}